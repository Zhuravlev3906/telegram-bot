from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Any
from datetime import datetime
import html
import base64
import uuid
import os
import re
from io import BytesIO

from database.manager import DatabaseManager
from utils.helpers import notify_moderators_web, save_base64_image, extract_base64_from_img_tags
from config import Config

router = APIRouter()
db = DatabaseManager()

class PhotoData(BaseModel):
    ContentType: Optional[str] = None
    ContentDisposition: Optional[str] = None
    Headers: Optional[dict] = None
    Length: Optional[int] = None
    Name: Optional[str] = None
    FileName: Optional[str] = None

class WebQuestionRequest(BaseModel):
    Email: str
    Description: str
    Steps: str
    Photo1: Optional[Any] = None  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ null
    Photo2: Optional[Any] = None
    Photo3: Optional[Any] = None
    DeviceInfo: str
    ImgTags: List[str] = []  # –°–ø–∏—Å–æ–∫ HTML img —Ç–µ–≥–æ–≤ —Å base64

class WebQuestionResponse(BaseModel):
    success: bool
    question_id: Optional[int] = None
    message: str

@router.post("/web-question", response_model=WebQuestionResponse)
async def create_question_from_web(request: WebQuestionRequest):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã —Å base64 —Ñ–æ—Ç–æ –≤ ImgTags
    """
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        email = html.escape(request.Email)
        description = html.escape(request.Description)
        steps = html.escape(request.Steps)
        device_info = html.escape(request.DeviceInfo)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = (
            f"üìß <b>–í–æ–ø—Ä–æ—Å —Å —Å–∞–π—Ç–∞</b>\n"
            f"üì® Email: {email}\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n{description}\n\n"
            f"üîπ <b>–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:</b>\n{steps.replace('<br>', '\n')}\n\n"
            f"üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n{device_info.replace('<br>', '\n')}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –î–ª—è –≤–µ–±-–≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id = 0 (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        question_id = db.add_question(0, question_text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑ ImgTags
        base64_images = extract_base64_from_img_tags(request.ImgTags)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º base64 —Ñ–æ—Ç–æ –∏–∑ ImgTags
        saved_photos = []
        photo_index = 0
        
        for photo_base64 in base64_images[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —Ñ–æ—Ç–æ
            if photo_base64 and photo_base64.strip():
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 —Ñ–æ—Ç–æ –≤ —Ñ–∞–π–ª
                    photo_path = save_base64_image(photo_base64, question_id, photo_index)
                    if photo_path:
                        saved_photos.append(photo_path)
                        photo_index += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        await notify_moderators_web(question_id, question_text, saved_photos)
        
        return WebQuestionResponse(
            success=True,
            question_id=question_id,
            message="–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
        )

@router.get("/questions/{question_id}")
async def get_question_status(question_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        question = db.get_question(question_id)
        if not question:
            raise HTTPException(status_code=404, detail="–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        status = db.get_question_status(question_id)
        answers = db.get_question_answers(question_id)
        
        return {
            "question_id": question_id,
            "status": status,
            "created_at": question[4],  # created_at –ø–æ–ª–µ
            "answers": answers
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
        )

# –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç router
api_router = router
from telegram import Update, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import ContextTypes, MessageHandler, filters, ConversationHandler, CommandHandler
from database.manager import DatabaseManager
from config import Config
from utils.helpers import notify_moderators_about_taken_question

db = DatabaseManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAITING_ANSWER = 1

async def add_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    db.add_moderator(user.id, user.username, user.first_name)
    
    await update.message.reply_text(
        "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."
    )

async def start_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    message_text = update.message.text
    moderator_id = update.effective_user.id
    
    try:
        question_id = int(message_text.split('_')[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–∑—è—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É
        if not db.set_question_in_progress(question_id, moderator_id):
            # –í–æ–ø—Ä–æ—Å —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            current_moderator_id = db.get_question_moderator(question_id)
            if current_moderator_id:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å #Q{question_id} —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –í–æ–ø—Ä–æ—Å #Q{question_id} —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
            return ConversationHandler.END
                
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        question = db.get_question(question_id)
        if not question:
            await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            db.release_question_lock(question_id)  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            return ConversationHandler.END
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
        moderator_name = update.effective_user.first_name
        await notify_moderators_about_taken_question(question_id, moderator_name, context)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        photos = db.get_question_photos(question_id)
        
        response_text = (
            f"‚úèÔ∏è –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å #Q{question_id}\n"
            f"–û—Ç: {question[5]} (@{question[4] if question[4] else '–±–µ–∑ username'})\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question[1]}\n\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question[2]}\n\n"
        )
        
        if photos:
            if len(photos) == 1:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photos[0][0],  # file_id
                    caption=response_text + "üì∑ –ö –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ 1 —Ñ–æ—Ç–æ\n\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Å —Ñ–æ—Ç–æ
                media_group = []
                
                # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                media_group.append(
                    InputMediaPhoto(
                        media=photos[0][0],
                        caption=response_text + f"üì∑ –ö –≤–æ–ø—Ä–æ—Å—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ\n\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
                    )
                )
                
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                for photo in photos[1:]:
                    media_group.append(InputMediaPhoto(media=photo[0]))
                
                await context.bot.send_media_group(
                    chat_id=update.effective_chat.id,
                    media=media_group
                )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            response_text += "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):"
            await update.message.reply_text(response_text, reply_markup=ReplyKeyboardRemove())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ context
        context.user_data['answering_question_id'] = question_id
        
        return AWAITING_ANSWER
        
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answer_123")
        return ConversationHandler.END

async def receive_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    answer_text = update.message.text
    question_id = context.user_data.get('answering_question_id')
    moderator_id = update.effective_user.id
    
    if not question_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—Å–µ –µ—â–µ –≤–ª–∞–¥–µ–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–º
    current_moderator_id = db.get_question_moderator(question_id)
    if current_moderator_id != moderator_id:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å #Q{question_id} —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
        )
        context.user_data.pop('answering_question_id', None)
        return ConversationHandler.END
        
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    question = db.get_question(question_id)
    if not question:
        await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        context.user_data.pop('answering_question_id', None)
        return ConversationHandler.END
    
    user_id = question[1]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–≤—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_response_text = (
            f"üìß –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #Q{question_id}:\n\n"
            f"{answer_text}\n\n"
            f"üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –±–æ—Ç–∞!"
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=user_response_text
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        answer_id = db.add_answer(question_id, moderator_id, answer_text)
        db.update_question_status(question_id, 'answered')
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('answering_question_id', None)
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–≤–µ—Ç #A{answer_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç #{answer_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–í–æ–ø—Ä–æ—Å #{question_id})")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}"
        print(error_message)
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
        if "chat not found" in str(e) or "bot was blocked" in str(e):
            error_message += "\n\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        elif "Forbidden" in str(e):
            error_message += "\n\n‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        
        await update.message.reply_text(error_message)
        
        # –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î, –Ω–æ –æ—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É
        try:
            answer_id = db.add_answer(question_id, moderator_id, answer_text)
            db.update_question_status(question_id, 'error')
            print(f"üìÅ –û—Ç–≤–µ—Ç #{answer_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
    
    return ConversationHandler.END

async def cancel_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = context.user_data.get('answering_question_id')
    
    if question_id:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞
        db.release_question_lock(question_id)
        context.user_data.pop('answering_question_id', None)
    
    await update.message.reply_text(
        "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n"
        "‚Ä¢ –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: 0\n"
        "‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: 0\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0"
    )
    
    await update.message.reply_text(stats_text)

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
def get_answer_conversation_handler():
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex(r'^/answer_\d+'), start_answer)
        ],
        states={
            AWAITING_ANSWER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_answer)
            ]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_answer)
        ]
    )
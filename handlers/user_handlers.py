from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from database.manager import DatabaseManager
from states.user_states import UserState
from utils.helpers import notify_moderators

db = DatabaseManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name)
    
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç! üëã

–Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞!.

–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?
‚Ä¢ üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å
‚Ä¢ ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:
"""
    
    keyboard = [["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    context.user_data['state'] = UserState.AWAITING_CHOICE

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    user_choice = update.message.text
    current_state = context.user_data.get('state')
    
    if current_state != UserState.AWAITING_CHOICE:
        from handlers.common_handlers import handle_unexpected_input
        await handle_unexpected_input(update, context)
        return
    
    if "–æ—Ç–∑—ã–≤" in user_choice.lower():
        await update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=ReplyKeyboardMarkup([["üö´ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        context.user_data['state'] = UserState.AWAITING_FEEDBACK
        context.user_data['type'] = 'feedback'
        
    elif "–≤–æ–ø—Ä–æ—Å" in user_choice.lower():
        instruction_text = """
üìù <b>–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ—á—å –≤–∞–º, –æ–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ:</b>

üîπ <b>–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:</b>
‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–¥ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã?
‚Ä¢ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–ª–∏?
‚Ä¢ –ù–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ/—ç–∫—Ä–∞–Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞?

üîπ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä?
‚Ä¢ –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä –∏ –µ–≥–æ –≤–µ—Ä—Å–∏—è (–µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–∞–π—Ç–µ)
‚Ä¢ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)

üîπ <b>–û–ø–∏—à–∏—Ç–µ —Å–∞–º—É –ø—Ä–æ–±–ª–µ–º—É:</b>
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
‚Ä¢ –ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–≤–∏–¥–µ–ª–∏?
‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ?

üì∏ <b>–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 3 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤</b> - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:</b>
"""
        
        await update.message.reply_text(
            instruction_text,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([["üö´ –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        context.user_data['state'] = UserState.AWAITING_QUESTION
        context.user_data['type'] = 'question'
        context.user_data['photos'] = []
        
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
        )

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î"""
    current_state = context.user_data.get('state')
    
    if current_state != UserState.AWAITING_FEEDBACK:
        from handlers.common_handlers import handle_unexpected_input
        await handle_unexpected_input(update, context)
        return
    
    feedback_text = update.message.text
    
    if "–æ—Ç–º–µ–Ω–∞" in feedback_text.lower():
        await cancel_operation(update, context)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    feedback_id = db.add_feedback(user_id, feedback_text)
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíô\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç–µ–º.",
        reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
    )
    
    print(f"–û—Ç–∑—ã–≤ #{feedback_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    context.user_data['state'] = UserState.AWAITING_CHOICE

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ - —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    current_state = context.user_data.get('state')
    
    if current_state != UserState.AWAITING_QUESTION:
        from handlers.common_handlers import handle_unexpected_input
        await handle_unexpected_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if update.message.text and "–æ—Ç–º–µ–Ω–∞" in update.message.text.lower():
        await cancel_operation(update, context)
        return
    
    user_id = update.effective_user.id
    question_text = ""
    photos = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ —Ñ–æ—Ç–æ)
    if update.message.text and not update.message.photo:
        question_text = update.message.text
        await process_question_complete(update, context, user_id, question_text, photos)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (—Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞)
    if update.message.photo and update.message.caption:
        question_text = update.message.caption
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)
        for photo in update.message.photo:
            photos.append({
                'file_id': photo.file_id,
                'file_unique_id': photo.file_unique_id
            })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —Ñ–æ—Ç–æ
        photos = photos[:3]
        await process_question_complete(update, context, user_id, question_text, photos)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    if update.message.photo and not update.message.caption:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        existing_photos = context.user_data.get('photos', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (–≤—Å–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        for photo in update.message.photo:
            if len(existing_photos) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ
                existing_photos.append({
                    'file_id': photo.file_id,
                    'file_unique_id': photo.file_unique_id
                })
        
        context.user_data['photos'] = existing_photos
        
        if len(existing_photos) >= 3:
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º:\n"
                "‚Ä¢ –®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
                "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"
            )
        else:
            remaining = 3 - len(existing_photos)
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ: {remaining}\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:"
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–≥–¥–∞ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if update.message.text and context.user_data.get('photos'):
        question_text = update.message.text
        photos = context.user_data.get('photos', [])
        await process_question_complete(update, context, user_id, question_text, photos)
        return
    
    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –ò–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã)\n"
        "‚Ä¢ –ò–ª–∏ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç"
    )

async def process_question_complete(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  user_id: int, question_text: str, photos: list):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î"""
    
    if not question_text.strip():
        await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º:\n"
            "‚Ä¢ –®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n" 
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    question_id = db.add_question(user_id, question_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    for photo in photos:
        db.add_question_photo(question_id, photo['file_id'], photo['file_unique_id'])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    await notify_moderators(update, context, question_id, question_text, photos)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    photos_count = len(photos)
    if photos_count == 0:
        photos_text = ""
    elif photos_count == 1:
        photos_text = " —Å 1 —Ñ–æ—Ç–æ"
    else:
        photos_text = f" —Å {photos_count} —Ñ–æ—Ç–æ"
    
    await update.message.reply_text(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω{photos_text}! üì©\n\n"
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–∏–º.\n"
        "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ —ç—Ç–æ—Ç —á–∞—Ç. –û–±—ã—á–Ω–æ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.clear()
    context.user_data['state'] = UserState.AWAITING_CHOICE

async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
    )
    context.user_data.clear()
    context.user_data['state'] = UserState.AWAITING_CHOICE
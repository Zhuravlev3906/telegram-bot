from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
from states.user_states import UserState

async def handle_unexpected_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if context.user_data.get('answering_question_id'):
        return
        
    current_state = context.user_data.get('state')
    
    if current_state == UserState.AWAITING_QUESTION:
        # –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:",
            reply_markup=ReplyKeyboardMarkup([
                ["üö´ –û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
        )
        context.user_data['state'] = UserState.AWAITING_CHOICE

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ConversationHandler
    if context.user_data.get('answering_question_id'):
        return
        
    current_state = context.user_data.get('state')
    
    if current_state == UserState.AWAITING_FEEDBACK:
        from handlers.user_handlers import handle_feedback
        await handle_feedback(update, context)
    elif current_state == UserState.AWAITING_QUESTION:
        from handlers.user_handlers import handle_question
        await handle_question(update, context)
    else:
        from handlers.user_handlers import handle_choice
        await handle_choice(update, context)

async def handle_unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if context.user_data.get('answering_question_id'):
        return
        
    await update.message.reply_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=ReplyKeyboardMarkup([["üó£Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]], resize_keyboard=True)
    )